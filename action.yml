name: 'Actions AWS WebServer'
description: 'Provision and AWS infra to host a webserver'
inputs:
  action: 
    description: "Desire outcome: apply, plan or destroy"
    required: false
    default: "apply"
  name:
    description: Function name
    required: true
  arm:
    description: Run in ARM compute
    required: false
    default: "true"
  cpu: 
    description: ".25, .5, 1, 2, 4, 8, 16 in vCPU for more details (docs)[https://docs.aws.amazon.com/eks/latest/userguide/fargate-pod-configuration.html]"
    required: false
    default: "256"
  memory:
    description: ".5 to 120 in GB, for more details (docs)[https://docs.aws.amazon.com/eks/latest/userguide/fargate-pod-configuration.html]"
    required: false
    default: "512"
  env: 
    description: List of environment variables in YML format
    required: false
    default: |
      CREATE_BY: alonch/actions-aws-function-node
  permissions:
    description: "List of permissions following Github standard of service: read or write. In YML format"
    default: ""
  container-image:
    description: full container image name
    required: true
    default: "nginx:latest"
outputs: 
  url: 
    description: "Public accessiable URL"
    value: ${{ steps.set-outputs.outputs.url }}
  arn: 
    description: "AWS Lambda ARN"
    value: ${{ steps.set-outputs.outputs.arn }}
runs:
  using: "composite"
  steps:
    - name: parse env
      shell: bash
      id: parse-input-env
      run: |
        cat <<-EOF > data.yaml
        ${{ inputs.env }}
        EOF
        JSON=$(yq -o=json '. // {}' data.yaml | jq -c '.')
        echo "json=$JSON" >> $GITHUB_OUTPUT
    - name: parse permissions
      shell: bash
      id: parse-input-permissions
      run: |
        cat <<-EOF > data.yaml
        ${{ inputs.permissions }}
        EOF
        JSON=$(yq -o=json '. // {}' data.yaml | jq -c '.')
        echo "json=$JSON" >> $GITHUB_OUTPUT
    - name: Applying infrastructure ðŸš€
      uses: pulumi/actions@v6
      
      env: 
        VAR_MEMORY: ${{ inputs.memory }}
        VAR_CPU: ${{ inputs.cpu }}
        VAR_CONTAINER_IMAGE: ${{ inputs.container-image }}
        PULUMI_CONFIG_PASSPHRASE: ""
      with:
        command: up
        stack-name: ${{ inputs.name }}-webserver
        cloud-url: s3://${{ env.TF_BACKEND_s3 }}
        work-dir: ${{ github.action_path }}
        upsert: true
        config-map: "{\"image\": {value: \"${{ inputs.container-image }}\", secret: false}, \"cpu\": {value: ${{ inputs.cpu }}, secret: false}, \"memory\": {value: ${{ inputs.memory }}, secret: false}}"
    - name: set outputs
      id: set-outputs
      if: ${{ inputs.action == 'apply' }}
      working-directory: ${{ github.action_path }}
      shell: bash
      run: |
        URL=$(pulumi stack output url)
        if [ -n "$URL" ]; then 
          echo "url=$URL" >> $GITHUB_OUTPUT
        fi
        