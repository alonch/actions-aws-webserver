name: actions-aws-webserver
runtime: yaml
config:
  cpu:
    value: 256
    secret: false
  memory:
    value: 512
    secret: false
  image: 
    value: nginx:latest
    secret: false
  port: 
    value: 80
    secret: false
  healthCheckResponse:
    value: "200"
    secret: false
  healthCheckPath:
    value: /
    secret: false
  dockerPath:
    value: .
    secret: false
  domain:
    value: realsense.ca
    secret: false
  subdomain:
    value: my-api
    secret: false
variables:
  hostedZone:
    fn::invoke:
      Function: aws:route53:getZone
      Arguments:
        name: ${domain}.
        privateZone: false
resources:
  repo:
    type: awsx:ecr:Repository
    properties:
      forceDelete: true

  builder:
    type: awsx:ecr:Image
    properties:
      repositoryUrl: ${repo.url}
      context: ${dockerPath}
      platform: linux/amd64 
  
  cert:
    type: aws:acm:Certificate
    properties:
      domainName: ${subdomain}.${domain}
      validationMethod: DNS
      validationOptions:
        - domainName: ${subdomain}.${domain}
          validationDomain: ${domain}
    options:
      retainOnDelete: true
  # certValidations:
  #   type: aws:acm:CertificateValidation
  #   properties:
  #     certificateArn: ${cert.arn}
  #     validationRecordFqdns: ${cert.domainValidationOptions}
  lb:
    type: awsx:lb:ApplicationLoadBalancer
    properties:
      listener:
        certificateArn: ${cert.arn}
        protocol: HTTPS
      defaultTargetGroup:
        connectionTermination: false
        deregistrationDelay: 0
        port: ${port}
        healthCheck:
            enabled: true
            healthyThreshold: 5
            interval: 30
            matcher: ${healthCheckResponse}
            path: ${healthCheckPath}
  lbRecord:
    type: aws:route53:Record
    properties:
      zoneId: ${hostedZone.zoneId}
      name: ${subdomain}.${domain}
      type: A
      ttl: 300
      records:
        - ${lb.loadBalancer.publicIp}
  cluster:
    type: aws:ecs:Cluster
  
  service:
    type: awsx:ecs:FargateService
    properties:
      cluster: ${cluster.arn}
      assignPublicIp: true
      
      taskDefinitionArgs:
        container:
          name: service
          # image: ${image}
          image: ${builder.imageUri}
          cpu: ${cpu}
          memory: ${memory}
          essential: true
          portMappings:
            - containerPort: ${port}
              hostPort: ${port}
              targetGroup: ${lb.defaultTargetGroup}
outputs:
  url: http://${lb.loadBalancer.dnsName}